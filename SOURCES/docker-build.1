.TH "DOCKER" "1" " Docker User Manuals" "Docker Community" "JUNE 2014"  ""

.SH NAME
.PP
docker\-build \- Build a new image from the source code at PATH

.SH SYNOPSIS
.PP
\fBdocker build\fP
[\fB\-\-force\-rm\fP[=\fIfalse\fP]]
[\fB\-\-no\-cache\fP[=\fIfalse\fP]]
[\fB\-q\fP|\fB\-\-quiet\fP[=\fIfalse\fP]]
[\fB\-\-rm\fP[=\fItrue\fP]]
[\fB\-t\fP|\fB\-\-tag\fP[=\fITAG\fP]]
 PATH | URL | \-

.SH DESCRIPTION
.PP
This will read the Dockerfile from the directory specified in \fBPATH\fP.
It also sends any other files and directories found in the current
directory to the Docker daemon. The contents of this directory would
be used by \fBADD\fP commands found within the Dockerfile.

.PP
Warning, this will send a lot of data to the Docker daemon depending
on the contents of the current directory. The build is run by the Docker
daemon, not by the CLI, so the whole context must be transferred to the daemon.
The Docker CLI reports "Sending build context to Docker daemon" when the context is sent to
the daemon.

.PP
When a single Dockerfile is given as the URL, then no context is set.
When a Git repository is set as the \fBURL\fP, the repository is used
as context.

.SH OPTIONS
.PP
\fB\-\-force\-rm\fP=\fItrue\fP|\fIfalse\fP
   Always remove intermediate containers, even after unsuccessful builds. The default is \fIfalse\fP.

.PP
\fB\-\-no\-cache\fP=\fItrue\fP|\fIfalse\fP
   Do not use cache when building the image. The default is \fIfalse\fP.

.PP
\fB\-q\fP, \fB\-\-quiet\fP=\fItrue\fP|\fIfalse\fP
   Suppress the verbose output generated by the containers. The default is \fIfalse\fP.

.PP
\fB\-\-rm\fP=\fItrue\fP|\fIfalse\fP
   Remove intermediate containers after a successful build. The default is \fItrue\fP.

.PP
\fB\-t\fP, \fB\-\-tag\fP=""
   Repository name (and optionally a tag) to be applied to the resulting image in case of success

.SH EXAMPLES.SH Building an image using a Dockefile located inside the current directory
.PP
Docker images can be built using the build command and a Dockerfile:

.PP
.RS

.nf
docker build .

.fi

.PP
During the build process Docker creates intermediate images. In order to
keep them, you must explicitly set \fB\fC\-\-rm=false\fR.

.PP
.RS

.nf
docker build \-\-rm=false .

.fi

.PP
A good practice is to make a sub\-directory with a related name and create
the Dockerfile in that directory. For example, a directory called mongo may
contain a Dockerfile to create a Docker MongoDB image. Likewise, another
directory called httpd may be used to store Dockerfiles for Apache web
server images.

.PP
It is also a good practice to add the files required for the image to the
sub\-directory. These files will then be specified with the \fB\fCADD\fR instruction
in the Dockerfile. Note: If you include a tar file (a good practice!), then
Docker will automatically extract the contents of the tar file
specified within the \fB\fCADD\fR instruction into the specified target.
.SH Building an image and naming that image
.PP
A good practice is to give a name to the image you are building. There are
no hard rules here but it is best to give the names consideration.

.PP
The \fB\-t\fP/\fB\-\-tag\fP flag is used to rename an image. Here are some examples:

.PP
Though it is not a good practice, image names can be arbtrary:

.PP
.RS

.nf
docker build \-t myimage .

.fi

.PP
A better approach is to provide a fully qualified and meaningful repository,
name, and tag (where the tag in this context means the qualifier after
the ":"). In this example we build a JBoss image for the Fedora repository
and give it the version 1.0:

.PP
.RS

.nf
docker build \-t fedora/jboss:1.0

.fi

.PP
The next example is for the "whenry" user repository and uses Fedora and
JBoss and gives it the version 2.1 :

.PP
.RS

.nf
docker build \-t whenry/fedora\-jboss:V2.1

.fi

.PP
If you do not provide a version tag then Docker will assign \fB\fClatest\fR:

.PP
.RS

.nf
docker build \-t whenry/fedora\-jboss

.fi

.PP
When you list the images, the image above will have the tag \fB\fClatest\fR.

.PP
So renaming an image is arbitrary but consideration should be given to
a useful convention that makes sense for consumers and should also take
into account Docker community conventions.
.SH Building an image using a URL
.PP
This will clone the specified Github repository from the URL and use it
as context. The Dockerfile at the root of the repository is used as
Dockerfile. This only works if the Github repository is a dedicated
repository.

.PP
.RS

.nf
docker build github.com/scollier/Fedora\-Dockerfiles/tree/master/apache

.fi

.PP
Note: You can set an arbitrary Git repository via the \fB\fCgit://\fR schema.

.SH HISTORY
.PP
March 2014, Originally compiled by William Henry (whenry at redhat dot com)
based on docker.com source material and internal work.
June 2014, updated by Sven Dowideit 
\[la]SvenDowideit@home.org.au\[ra]
